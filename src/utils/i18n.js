// src/utils/i18n.js
import { LANGUAGE_KEY } from "../constants/storage";

const dict = {
  pt: {
    tree: "Árvore",
    inventory: "Inventário",
    menu: "Menu",
    panel: "Painel",
    open: "Abrir",
    close: "Fechar",
    light: "Claro",
    dark: "Escuro",
    feat: "Talento (ASI)",
    extraAttack: "Ataque Extra",
    showMinimap: "Mostrar MiniMapa",
    hideMinimap: "Ocultar MiniMapa",
    addNode: "+ Nó D&D",
    examplePack: "+ Pacote Exemplo",
    autoLayout: "Layout automático",
    validate: "Validar",
    fit: "Ajustar visão",
    exportJSON: "Exportar JSON",
    exportMD: "Exportar Markdown",
    importJSON: "Importar JSON",
    clear: "Limpar",
    duplicateNode: "Duplicar nó",
    deleteEdges: "Excluir ligações",
    searchPlaceholder: "Buscar nome/tags/tipo...",
    editNode: "Editar Nó",
    delete: "Excluir",
    name: "Nome",
    type: "Tipo",
    class: "Classe (opcional)",
    shortText: "Resumo curto",
    minLevel: "Nível mín.",
    description: "Descrição",
    abilityReqs: "Pré-req. de Atributos",
    actionEconomy: "Economia de Ação",
    uses: "Usos",
    color: "Cor",
    prereqMode: "Pré-req",
    all: "Todos",
    nodes: "Nós",
    connections: "Conexões",
    any: "Qualquer um",
    tags: "Tags (separe por vírgulas)",
    setAsPrereq: "Definir como pré-requisito de…",
    noOthers: "Não há outros nós.",
    nodePrereqs: "Pré-requisitos deste nó",
    none: "Sem resumo",
    quickHelp: "Ajuda rápida",
    helpBullets: [
      "Conecte nós para indicar pré-requisitos (seta ➜ do requisito para a habilidade).",
      "Use Layout automático para organizar por ordem de desbloqueio.",
      "Campos de D&D: Tipo, Classe, Nível, Atributos, Ação e Usos.",
      "Exporte em JSON (para reabrir) ou Markdown (para documentação).",
      "Dê duplo clique em uma ligação para removê-la.",
      "Atalhos: '_' novo nó • '{' auto layout • '}' ajustar visão • Ctrl+S exporta."
    ],
    validationReport: "Relatório de Validação",
    cycle: "Ciclo",
    noCycles: "Sem ciclos detectados.",
    roots: "Raízes",
    layers: "Camadas",
    // Inventário
    newItem: "+ Novo Item",
    template: "+ Template",
    exportInventory: "Exportar JSON",
    importInventory: "Importar JSON",
    deleteSelected: "Apagar selecionados",
    searchInventory: "Buscar no inventário...",
    allCategories: "Todas categorias",
    sortBy: "Ordenar por",
    asc: "↑",
    desc: "↓",
    items: "Itens",
    totalWeight: "Peso total",
    totalValue: "Valor total",
    item: "Item",
    category: "Categoria",
    qty: "Qtd",
    weight: "Peso (lb)",
    total: "Valor (total)",
    properties: "Propriedades",
    actions: "Ações",
    equip: "Equipar",
    unequip: "Desequipar",
    attune: "Sintonizar",
    unattune: "Dessintonizar",
    ammoMinus: "-1 munição",
    ammoPlus: "+1 munição",
    useOne: "Usar 1",
    edit: "Editar",
    duplicate: "Duplicar",
    remove: "X",
    noResults: "Nenhum item encontrado.",
    // Editor de item
    newItemTitle: "Novo Item",
    editItemTitle: "Editar Item",
    close: "Fechar",
    tagsComma: "Tags (vírgulas)",
    value: "Valor",
    unit: "Unidade",
    equipped: "Equipado",
    attuned: "Sintonizado",
    armorType: "Tipo de Armadura",
    ac: "CA (AC)",
    strReq: "Força mín.",
    stealthDisadv: "Desvantagem em Furtividade",
    damage: "Dano",
    range: "Alcance",
    ammoCurrent: "Munição atual",
    ammoMax: "Munição máx.",
    ammoSlots: "Munição (slots)",
    addSlot: "Adicionar slot",
    active: "Ativo",
    current: "Atual",
    max: "Máx",
    slotNote: "Nota",
    noSlotsYet: "Nenhum slot adicionado",
    manageSlots: "Gerenciar slots…",

    die: "Tipo (d4, d6, d8, d10, d12, d20, token)",
    dieCount: "Quantidade de dados",
    label: "Rótulo",
    keyWhere: "Onde abre",
    keyUse: "Finalidade / Observações",
    notes: "Notas",
    clearForm: "Limpar",
    cancel: "Cancelar",
    saveItem: "Salvar item",
    addItem: "Adicionar item",
    language: "Idioma",
  },
  en: {
    tree: "Tree",
    inventory: "Inventory",
    menu: "Menu",
    panel: "Panel",
    open: "Open",
    close: "Close",
    light: "Light",
    dark: "Dark",
    feat: "Feat (ASI)",
    extraAttack: "Extra Attack",
    showMinimap: "Show MiniMap",
    hideMinimap: "Hide MiniMap",
    addNode: "+ D&D Node",
    examplePack: "+ Example Pack",
    autoLayout: "Auto layout",
    validate: "Validate",
    fit: "Fit view",
    exportJSON: "Export JSON",
    exportMD: "Export Markdown",
    importJSON: "Import JSON",
    clear: "Clear",
    duplicateNode: "Duplicate node",
    deleteEdges: "Delete links",
    searchPlaceholder: "Search name/tags/type...",
    editNode: "Edit Node",
    delete: "Delete",
    name: "Name",
    type: "Type",
    class: "Class (optional)",
    shortText: "Short summary",
    minLevel: "Min level",
    description: "Description",
    abilityReqs: "Ability Requirements",
    actionEconomy: "Action Economy",
    uses: "Uses",
    color: "Color",
    prereqMode: "Prereq",
    all: "All",
    nodes: "Nodes",
    connections: "Connections",
    any: "Any",
    tags: "Tags (comma-separated)",
    setAsPrereq: "Set as prerequisite of…",
    noOthers: "No other nodes.",
    nodePrereqs: "This node’s prerequisites",
    none: "No summary",
    quickHelp: "Quick help",
    helpBullets: [
      "Connect nodes to indicate prerequisites (arrow ➜ from requirement to ability).",
      "Use Auto layout to organize by unlock order.",
      "D&D fields: Type, Class, Level, Abilities, Action, Uses.",
      "Export as JSON (to reopen) or Markdown (for docs).",
      "Double-click a link to remove it.",
      "Shortcuts: '_' new node • '{' auto layout • '}' fit • Ctrl+S export."
    ],
    validationReport: "Validation Report",
    cycle: "Cycle",
    noCycles: "No cycles detected.",
    roots: "Roots",
    layers: "Layers",
    // Inventory
    newItem: "+ New Item",
    template: "+ Template",
    exportInventory: "Export JSON",
    importInventory: "Import JSON",
    deleteSelected: "Delete selected",
    searchInventory: "Search inventory...",
    allCategories: "All categories",
    sortBy: "Sort by",
    asc: "↑",
    desc: "↓",
    items: "Items",
    totalWeight: "Total weight",
    totalValue: "Total value",
    item: "Item",
    category: "Category",
    qty: "Qty",
    weight: "Weight (lb)",
    total: "Total value",
    properties: "Properties",
    actions: "Actions",
    equip: "Equip",
    unequip: "Unequip",
    attune: "Attune",
    unattune: "Unattune",
    ammoMinus: "-1 ammo",
    ammoPlus: "+1 ammo",
    useOne: "Use 1",
    edit: "Edit",
    duplicate: "Duplicate",
    remove: "X",
    noResults: "No items found.",
    // Item editor
    newItemTitle: "New Item",
    editItemTitle: "Edit Item",
    close: "Close",
    tagsComma: "Tags (comma)",
    value: "Value",
    unit: "Unit",
    equipped: "Equipped",
    attuned: "Attuned",
    armorType: "Armor Type",
    ac: "AC",
    strReq: "Min STR",
    stealthDisadv: "Stealth Disadvantage",
    damage: "Damage",
    range: "Range",
    ammoCurrent: "Current ammo",
    ammoMax: "Max ammo",
    ammoSlots: "Ammo (slots)",
    addSlot: "Add slot",
    active: "Active",
    current: "Current",
    max: "Max",
    slotNote: "Note",
    noSlotsYet: "No slots yet",
    manageSlots: "Manage slots…",

    die: "Type (d4, d6, d8, d10, d12, d20, token)",
    dieCount: "Dice count",
    label: "Label",
    keyWhere: "Opens where",
    keyUse: "Purpose / Notes",
    notes: "Notes",
    clearForm: "Clear",
    cancel: "Cancel",
    saveItem: "Save item",
    addItem: "Add item",
    language: "Language",
  },
};

export function getLang() {
  try { return localStorage.getItem(LANGUAGE_KEY) || "pt"; } catch { return "pt"; }
}

export function setLang(lang) {
  try { localStorage.setItem(LANGUAGE_KEY, lang); } catch {}
  // suggestion: force a soft reload so all components pick new literals without context
  try { location.reload(); } catch {}
}

export function t(key, params) {
  const lang = getLang();
  const table = dict[lang] || dict.pt;
  const parts = key.split(".");
  let value = parts.reduce((acc, k) => (acc && acc[k] != null ? acc[k] : undefined), table);
  if (value == null) return key;
  if (typeof value === "string" && params && typeof params === "object") {
    return value.replace(/\{\{(\w+)\}\}/g, (_, k) => (params[k] ?? ""));
  }
  return value;
}
